@model Repozytorium.Models.Zdjecie

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Zdjecie</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UzytkownikId, "UzytkownikId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UzytkownikId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UzytkownikId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SizeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SizeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SizeName, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.ImgBytes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImgBytes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImgBytes, "", new { @class = "text-danger" })
            </div>
        </div>*@

      @*<div class="form-group">
        <div class="col-md-10">*@
          @*Uwaga: EditorFor->TextBoxFor with event*@
          @*@Html.TextBoxFor(model => model.ImgBytes, 
            new { type = "file", @class = "form-control", @onchange = "checkFile(this);" })
          @Html.ValidationMessageFor(model => model.ImgBytes, "", new { @class = "text-danger" })
        </div>
      </div>*@


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">

    function checkFile(fieldObj) {
      var FileName = fieldObj.value;
      var FileExt = FileName.substr(FileName.lastIndexOf('.') + 1);
      var FileSize = fieldObj.files[0].size;
      var FileSizeMB = 4;

      if ((FileExt != "jpg" && FileExt != "gif" && FileExt != "png" && FileExt != "jpeg" && FileExt != "bmp")
        || FileSize > 1048576 * 4) {
        var error = "Typ pliku : " + FileExt + "\n\n";
        error += "Rozmiar pliku: " + FileSizeMB + " MB \n\n";
        error += "Akceptowane typy plików: jpg, png, gif, bmp. Maksymalny rozmiar 4 MB.\n\n";

        alert(error);
        return false;
      }
      return true;
    }
</script>

